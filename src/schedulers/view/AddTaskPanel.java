/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schedulers.view;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import schedulers.controller.Controller;
import schedulers.model.PeriodicTask;
import schedulers.model.Task;

/**
 *
 * @author Esiel, Marco
 */
public class AddTaskPanel extends javax.swing.JPanel {
    private Controller controller;

    /**
     * Creates new form AddTaskPanel
     */
    public AddTaskPanel() {
        initComponents();
    }
    
    public void setController(Controller controller) {
        this.controller = controller;
    }
    
    private boolean checkEmptiness(JTextField textField) {
        return textField.getText() == null || textField.getText().isEmpty();
    }
    
    private boolean checkEmptiness(JTextField ... textFields) {
        for (JTextField tf : textFields)
            if (checkEmptiness(tf)) return true;
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addButton = new javax.swing.JButton();
        arrivalTimeTextField = new javax.swing.JTextField();
        burstTimeTextField = new javax.swing.JTextField();
        deadlineTextField = new javax.swing.JTextField();
        arrivalTimeLabel = new javax.swing.JLabel();
        burstTimeLabel = new javax.swing.JLabel();
        deadlineLabel = new javax.swing.JLabel();
        periodLabel = new javax.swing.JLabel();
        periodTextField = new javax.swing.JTextField();
        addTaskLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setName(""); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        addButton.setText("Añadir");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 4);
        add(addButton, gridBagConstraints);

        arrivalTimeTextField.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(arrivalTimeTextField, gridBagConstraints);

        burstTimeTextField.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(burstTimeTextField, gridBagConstraints);

        deadlineTextField.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(deadlineTextField, gridBagConstraints);

        arrivalTimeLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        arrivalTimeLabel.setText("Tiempo de llegada:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(arrivalTimeLabel, gridBagConstraints);

        burstTimeLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        burstTimeLabel.setText("Tiempo de ejecución:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(burstTimeLabel, gridBagConstraints);

        deadlineLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deadlineLabel.setText("Deadline:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(deadlineLabel, gridBagConstraints);

        periodLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        periodLabel.setText("Periódo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(periodLabel, gridBagConstraints);

        periodTextField.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(periodTextField, gridBagConstraints);

        addTaskLabel.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        addTaskLabel.setText("Añadir Tarea");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        add(addTaskLabel, gridBagConstraints);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 4);
        add(resetButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!this.checkEmptiness(arrivalTimeTextField, burstTimeTextField, deadlineTextField)) {
            try{
                if (!this.checkEmptiness(periodTextField)) {

                    controller.addTask(new PeriodicTask(
                            Long.parseLong(arrivalTimeTextField.getText()),
                            Long.parseLong(burstTimeTextField.getText()),
                            Long.parseLong(deadlineTextField.getText()),
                            Long.parseLong(periodTextField.getText())
                    ));

                    System.out.println("CREA PERIODICA");
                } else {
                    controller.addTask(new Task(
                            Long.parseLong(arrivalTimeTextField.getText()),
                            Long.parseLong(burstTimeTextField.getText()),
                            Long.parseLong(deadlineTextField.getText())   
                    ));
                    System.out.println("CREA TAREA NORMAL");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Solo valores enteros son validos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El tiempo de llegada, "
                    + "el tiempo de ejecución "
                    + "y el deadline no pueden estar vacios", "Información incompleta", JOptionPane.WARNING_MESSAGE);
        }
        
        System.out.println(controller.getTasks());
    }//GEN-LAST:event_addButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        this.arrivalTimeTextField.setText(null);
        this.burstTimeTextField.setText(null);
        this.deadlineTextField.setText(null);
        this.periodTextField.setText(null);
    }//GEN-LAST:event_resetButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addTaskLabel;
    private javax.swing.JLabel arrivalTimeLabel;
    private javax.swing.JTextField arrivalTimeTextField;
    private javax.swing.JLabel burstTimeLabel;
    private javax.swing.JTextField burstTimeTextField;
    private javax.swing.JLabel deadlineLabel;
    private javax.swing.JTextField deadlineTextField;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JTextField periodTextField;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables

}
